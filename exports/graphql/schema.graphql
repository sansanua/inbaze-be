type Companies {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  description: String
  risk: Int
  complexity: Int
  liquidity: ENUM_COMPANIES_LIQUIDITY
  typeOfIncome: ENUM_COMPANIES_TYPEOFINCOME
  processOfManagingMoney: String
  processOfGeneratingIncome: String
  descriptionOfCooperation: String
  minimumInvestmentPeriod: String
  optimalInvestmentPeriod: String
  incomePaymentProcess: String
  risksOfLossInvested: String
  placeOfStorageFunds: String
  liquidityOfInvestment: String
  companyCommission: String
  otherServiceCharges: String
  payingTaxesIncome: Boolean
  documentsSecuringRights: String
  documentsActivities: String
  documentsFromInvestor: String
  site: String
  startYear: Int
  numberOfClients: Int
  onlineInvestmentStatusTracking: Boolean
  minimumInvestmentAmount: Int
  historicalProfitability: Int
  capital: Int
  profitability: Profitability
  aboutCompany: String
  disabled: Boolean
  instruments(sort: String, limit: Int, start: Int, where: JSON): [Instruments]
  investmentCurrency(sort: String, limit: Int, start: Int, where: JSON): [Currencies]
  currencyIncome(sort: String, limit: Int, start: Int, where: JSON): [Currencies]
}

type CompaniesAggregator {
  count: Int
  totalCount: Int
  sum: CompaniesAggregatorSum
  avg: CompaniesAggregatorAvg
  min: CompaniesAggregatorMin
  max: CompaniesAggregatorMax
}

type CompaniesAggregatorAvg {
  risk: Float
  complexity: Float
  startYear: Float
  numberOfClients: Float
  minimumInvestmentAmount: Float
  historicalProfitability: Float
  capital: Float
}

type CompaniesAggregatorMax {
  risk: Float
  complexity: Float
  startYear: Float
  numberOfClients: Float
  minimumInvestmentAmount: Float
  historicalProfitability: Float
  capital: Float
}

type CompaniesAggregatorMin {
  risk: Float
  complexity: Float
  startYear: Float
  numberOfClients: Float
  minimumInvestmentAmount: Float
  historicalProfitability: Float
  capital: Float
}

type CompaniesAggregatorSum {
  risk: Float
  complexity: Float
  startYear: Float
  numberOfClients: Float
  minimumInvestmentAmount: Float
  historicalProfitability: Float
  capital: Float
}

type CompaniesConnection {
  values: [Companies]
  groupBy: CompaniesGroupBy
  aggregate: CompaniesAggregator
}

type CompaniesConnectionAboutCompany {
  key: String
  connection: CompaniesConnection
}

type CompaniesConnectionCapital {
  key: Int
  connection: CompaniesConnection
}

type CompaniesConnectionCompanyCommission {
  key: String
  connection: CompaniesConnection
}

type CompaniesConnectionComplexity {
  key: Int
  connection: CompaniesConnection
}

type CompaniesConnectionCreated_at {
  key: DateTime
  connection: CompaniesConnection
}

type CompaniesConnectionDescription {
  key: String
  connection: CompaniesConnection
}

type CompaniesConnectionDescriptionOfCooperation {
  key: String
  connection: CompaniesConnection
}

type CompaniesConnectionDisabled {
  key: Boolean
  connection: CompaniesConnection
}

type CompaniesConnectionDocumentsActivities {
  key: String
  connection: CompaniesConnection
}

type CompaniesConnectionDocumentsFromInvestor {
  key: String
  connection: CompaniesConnection
}

type CompaniesConnectionDocumentsSecuringRights {
  key: String
  connection: CompaniesConnection
}

type CompaniesConnectionHistoricalProfitability {
  key: Int
  connection: CompaniesConnection
}

type CompaniesConnectionId {
  key: ID
  connection: CompaniesConnection
}

type CompaniesConnectionIncomePaymentProcess {
  key: String
  connection: CompaniesConnection
}

type CompaniesConnectionLiquidity {
  key: String
  connection: CompaniesConnection
}

type CompaniesConnectionLiquidityOfInvestment {
  key: String
  connection: CompaniesConnection
}

type CompaniesConnectionMinimumInvestmentAmount {
  key: Int
  connection: CompaniesConnection
}

type CompaniesConnectionMinimumInvestmentPeriod {
  key: String
  connection: CompaniesConnection
}

type CompaniesConnectionName {
  key: String
  connection: CompaniesConnection
}

type CompaniesConnectionNumberOfClients {
  key: Int
  connection: CompaniesConnection
}

type CompaniesConnectionOnlineInvestmentStatusTracking {
  key: Boolean
  connection: CompaniesConnection
}

type CompaniesConnectionOptimalInvestmentPeriod {
  key: String
  connection: CompaniesConnection
}

type CompaniesConnectionOtherServiceCharges {
  key: String
  connection: CompaniesConnection
}

type CompaniesConnectionPayingTaxesIncome {
  key: Boolean
  connection: CompaniesConnection
}

type CompaniesConnectionPlaceOfStorageFunds {
  key: String
  connection: CompaniesConnection
}

type CompaniesConnectionProcessOfGeneratingIncome {
  key: String
  connection: CompaniesConnection
}

type CompaniesConnectionProcessOfManagingMoney {
  key: String
  connection: CompaniesConnection
}

type CompaniesConnectionProfitability {
  key: ID
  connection: CompaniesConnection
}

type CompaniesConnectionRisk {
  key: Int
  connection: CompaniesConnection
}

type CompaniesConnectionRisksOfLossInvested {
  key: String
  connection: CompaniesConnection
}

type CompaniesConnectionSite {
  key: String
  connection: CompaniesConnection
}

type CompaniesConnectionStartYear {
  key: Int
  connection: CompaniesConnection
}

type CompaniesConnectionTypeOfIncome {
  key: String
  connection: CompaniesConnection
}

type CompaniesConnectionUpdated_at {
  key: DateTime
  connection: CompaniesConnection
}

type CompaniesGroupBy {
  id: [CompaniesConnectionId]
  created_at: [CompaniesConnectionCreated_at]
  updated_at: [CompaniesConnectionUpdated_at]
  name: [CompaniesConnectionName]
  description: [CompaniesConnectionDescription]
  risk: [CompaniesConnectionRisk]
  complexity: [CompaniesConnectionComplexity]
  liquidity: [CompaniesConnectionLiquidity]
  typeOfIncome: [CompaniesConnectionTypeOfIncome]
  processOfManagingMoney: [CompaniesConnectionProcessOfManagingMoney]
  processOfGeneratingIncome: [CompaniesConnectionProcessOfGeneratingIncome]
  descriptionOfCooperation: [CompaniesConnectionDescriptionOfCooperation]
  minimumInvestmentPeriod: [CompaniesConnectionMinimumInvestmentPeriod]
  optimalInvestmentPeriod: [CompaniesConnectionOptimalInvestmentPeriod]
  incomePaymentProcess: [CompaniesConnectionIncomePaymentProcess]
  risksOfLossInvested: [CompaniesConnectionRisksOfLossInvested]
  placeOfStorageFunds: [CompaniesConnectionPlaceOfStorageFunds]
  liquidityOfInvestment: [CompaniesConnectionLiquidityOfInvestment]
  companyCommission: [CompaniesConnectionCompanyCommission]
  otherServiceCharges: [CompaniesConnectionOtherServiceCharges]
  payingTaxesIncome: [CompaniesConnectionPayingTaxesIncome]
  documentsSecuringRights: [CompaniesConnectionDocumentsSecuringRights]
  documentsActivities: [CompaniesConnectionDocumentsActivities]
  documentsFromInvestor: [CompaniesConnectionDocumentsFromInvestor]
  site: [CompaniesConnectionSite]
  startYear: [CompaniesConnectionStartYear]
  numberOfClients: [CompaniesConnectionNumberOfClients]
  onlineInvestmentStatusTracking: [CompaniesConnectionOnlineInvestmentStatusTracking]
  minimumInvestmentAmount: [CompaniesConnectionMinimumInvestmentAmount]
  historicalProfitability: [CompaniesConnectionHistoricalProfitability]
  capital: [CompaniesConnectionCapital]
  profitability: [CompaniesConnectionProfitability]
  aboutCompany: [CompaniesConnectionAboutCompany]
  disabled: [CompaniesConnectionDisabled]
}

input CompanyInput {
  name: String
  description: String
  instruments: [ID]
  investmentCurrency: [ID]
  currencyIncome: [ID]
  risk: Int
  complexity: Int
  liquidity: ENUM_COMPANIES_LIQUIDITY
  typeOfIncome: ENUM_COMPANIES_TYPEOFINCOME
  processOfManagingMoney: String
  processOfGeneratingIncome: String
  descriptionOfCooperation: String
  minimumInvestmentPeriod: String
  optimalInvestmentPeriod: String
  incomePaymentProcess: String
  risksOfLossInvested: String
  placeOfStorageFunds: String
  liquidityOfInvestment: String
  companyCommission: String
  otherServiceCharges: String
  payingTaxesIncome: Boolean
  documentsSecuringRights: String
  documentsActivities: String
  documentsFromInvestor: String
  site: String
  startYear: Int
  numberOfClients: Int
  onlineInvestmentStatusTracking: Boolean
  minimumInvestmentAmount: Int
  historicalProfitability: Int
  capital: Int
  profitability: ID
  aboutCompany: String
  disabled: Boolean
}

input createCompanyInput {
  data: CompanyInput
}

type createCompanyPayload {
  company: Companies
}

input createCurrencyInput {
  data: CurrencyInput
}

type createCurrencyPayload {
  currency: Currencies
}

input createFileInput {
  data: FileInput
}

type createFilePayload {
  file: UploadFile
}

input createInstrumentInput {
  data: InstrumentInput
}

type createInstrumentPayload {
  instrument: Instruments
}

input createProfitabilityInput {
  data: ProfitabilityInput
}

type createProfitabilityPayload {
  profitability: Profitability
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createSubscribeUserInput {
  data: SubscribeUserInput
}

type createSubscribeUserPayload {
  subscribeUser: SubscribeUsers
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

type Currencies {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  symbol: String
  slug: String
  companies(sort: String, limit: Int, start: Int, where: JSON): [Companies]
}

type CurrenciesAggregator {
  count: Int
  totalCount: Int
}

type CurrenciesConnection {
  values: [Currencies]
  groupBy: CurrenciesGroupBy
  aggregate: CurrenciesAggregator
}

type CurrenciesConnectionCreated_at {
  key: DateTime
  connection: CurrenciesConnection
}

type CurrenciesConnectionId {
  key: ID
  connection: CurrenciesConnection
}

type CurrenciesConnectionName {
  key: String
  connection: CurrenciesConnection
}

type CurrenciesConnectionSlug {
  key: String
  connection: CurrenciesConnection
}

type CurrenciesConnectionSymbol {
  key: String
  connection: CurrenciesConnection
}

type CurrenciesConnectionUpdated_at {
  key: DateTime
  connection: CurrenciesConnection
}

type CurrenciesGroupBy {
  id: [CurrenciesConnectionId]
  created_at: [CurrenciesConnectionCreated_at]
  updated_at: [CurrenciesConnectionUpdated_at]
  name: [CurrenciesConnectionName]
  symbol: [CurrenciesConnectionSymbol]
  slug: [CurrenciesConnectionSlug]
}

input CurrencyInput {
  name: String
  symbol: String
  slug: String
  companies: [ID]
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input deleteCompanyInput {
  where: InputID
}

type deleteCompanyPayload {
  company: Companies
}

input deleteCurrencyInput {
  where: InputID
}

type deleteCurrencyPayload {
  currency: Currencies
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type deleteGlobalPayload {
  global: Global
}

input deleteInstrumentInput {
  where: InputID
}

type deleteInstrumentPayload {
  instrument: Instruments
}

input deleteProfitabilityInput {
  where: InputID
}

type deleteProfitabilityPayload {
  profitability: Profitability
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteSubscribeUserInput {
  where: InputID
}

type deleteSubscribeUserPayload {
  subscribeUser: SubscribeUsers
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editCompanyInput {
  name: String
  description: String
  instruments: [ID]
  investmentCurrency: [ID]
  currencyIncome: [ID]
  risk: Int
  complexity: Int
  liquidity: ENUM_COMPANIES_LIQUIDITY
  typeOfIncome: ENUM_COMPANIES_TYPEOFINCOME
  processOfManagingMoney: String
  processOfGeneratingIncome: String
  descriptionOfCooperation: String
  minimumInvestmentPeriod: String
  optimalInvestmentPeriod: String
  incomePaymentProcess: String
  risksOfLossInvested: String
  placeOfStorageFunds: String
  liquidityOfInvestment: String
  companyCommission: String
  otherServiceCharges: String
  payingTaxesIncome: Boolean
  documentsSecuringRights: String
  documentsActivities: String
  documentsFromInvestor: String
  site: String
  startYear: Int
  numberOfClients: Int
  onlineInvestmentStatusTracking: Boolean
  minimumInvestmentAmount: Int
  historicalProfitability: Int
  capital: Int
  profitability: ID
  aboutCompany: String
  disabled: Boolean
}

input editCurrencyInput {
  name: String
  symbol: String
  slug: String
  companies: [ID]
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
}

input editGlobalInput {
  dollarExchangeRate: Float
}

input editInstrumentInput {
  name: String
  slug: String
  companies: [ID]
  description: String
  currency: ID
  risk: Int
  profitability: Int
  complexity: Int
  shortDescription: String
  mainParameters: String
  howGenerateIncome: String
  minusInvestment: String
  plusInvestment: String
  disabled: Boolean
}

input editProfitabilityInput {
  name: String
  slug: String
  companies: [ID]
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editSubscribeUserInput {
  email: String
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

enum ENUM_COMPANIES_LIQUIDITY {
  quickExit
  longExit
}

enum ENUM_COMPANIES_TYPEOFINCOME {
  fixed
  floating
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
}

type ForgotPassword {
  ok: Boolean
}

type Global {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  dollarExchangeRate: Float
}

input GlobalInput {
  dollarExchangeRate: Float
}

input InputID {
  id: ID!
}

input InstrumentInput {
  name: String
  slug: String
  companies: [ID]
  description: String
  currency: ID
  risk: Int
  profitability: Int
  complexity: Int
  shortDescription: String
  mainParameters: String
  howGenerateIncome: String
  minusInvestment: String
  plusInvestment: String
  disabled: Boolean
}

type Instruments {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  slug: String
  description: String
  currency: Currencies
  risk: Int
  profitability: Int
  complexity: Int
  shortDescription: String
  mainParameters: String
  howGenerateIncome: String
  minusInvestment: String
  plusInvestment: String
  disabled: Boolean
  companies(sort: String, limit: Int, start: Int, where: JSON): [Companies]
}

type InstrumentsAggregator {
  count: Int
  totalCount: Int
  sum: InstrumentsAggregatorSum
  avg: InstrumentsAggregatorAvg
  min: InstrumentsAggregatorMin
  max: InstrumentsAggregatorMax
}

type InstrumentsAggregatorAvg {
  risk: Float
  profitability: Float
  complexity: Float
}

type InstrumentsAggregatorMax {
  risk: Float
  profitability: Float
  complexity: Float
}

type InstrumentsAggregatorMin {
  risk: Float
  profitability: Float
  complexity: Float
}

type InstrumentsAggregatorSum {
  risk: Float
  profitability: Float
  complexity: Float
}

type InstrumentsConnection {
  values: [Instruments]
  groupBy: InstrumentsGroupBy
  aggregate: InstrumentsAggregator
}

type InstrumentsConnectionComplexity {
  key: Int
  connection: InstrumentsConnection
}

type InstrumentsConnectionCreated_at {
  key: DateTime
  connection: InstrumentsConnection
}

type InstrumentsConnectionCurrency {
  key: ID
  connection: InstrumentsConnection
}

type InstrumentsConnectionDescription {
  key: String
  connection: InstrumentsConnection
}

type InstrumentsConnectionDisabled {
  key: Boolean
  connection: InstrumentsConnection
}

type InstrumentsConnectionHowGenerateIncome {
  key: String
  connection: InstrumentsConnection
}

type InstrumentsConnectionId {
  key: ID
  connection: InstrumentsConnection
}

type InstrumentsConnectionMainParameters {
  key: String
  connection: InstrumentsConnection
}

type InstrumentsConnectionMinusInvestment {
  key: String
  connection: InstrumentsConnection
}

type InstrumentsConnectionName {
  key: String
  connection: InstrumentsConnection
}

type InstrumentsConnectionPlusInvestment {
  key: String
  connection: InstrumentsConnection
}

type InstrumentsConnectionProfitability {
  key: Int
  connection: InstrumentsConnection
}

type InstrumentsConnectionRisk {
  key: Int
  connection: InstrumentsConnection
}

type InstrumentsConnectionShortDescription {
  key: String
  connection: InstrumentsConnection
}

type InstrumentsConnectionSlug {
  key: String
  connection: InstrumentsConnection
}

type InstrumentsConnectionUpdated_at {
  key: DateTime
  connection: InstrumentsConnection
}

type InstrumentsGroupBy {
  id: [InstrumentsConnectionId]
  created_at: [InstrumentsConnectionCreated_at]
  updated_at: [InstrumentsConnectionUpdated_at]
  name: [InstrumentsConnectionName]
  slug: [InstrumentsConnectionSlug]
  description: [InstrumentsConnectionDescription]
  currency: [InstrumentsConnectionCurrency]
  risk: [InstrumentsConnectionRisk]
  profitability: [InstrumentsConnectionProfitability]
  complexity: [InstrumentsConnectionComplexity]
  shortDescription: [InstrumentsConnectionShortDescription]
  mainParameters: [InstrumentsConnectionMainParameters]
  howGenerateIncome: [InstrumentsConnectionHowGenerateIncome]
  minusInvestment: [InstrumentsConnectionMinusInvestment]
  plusInvestment: [InstrumentsConnectionPlusInvestment]
  disabled: [InstrumentsConnectionDisabled]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | ForgotPassword | Companies | CompaniesConnection | CompaniesAggregator | CompaniesAggregatorSum | CompaniesAggregatorAvg | CompaniesAggregatorMin | CompaniesAggregatorMax | CompaniesGroupBy | CompaniesConnectionId | CompaniesConnectionCreated_at | CompaniesConnectionUpdated_at | CompaniesConnectionName | CompaniesConnectionDescription | CompaniesConnectionRisk | CompaniesConnectionComplexity | CompaniesConnectionLiquidity | CompaniesConnectionTypeOfIncome | CompaniesConnectionProcessOfManagingMoney | CompaniesConnectionProcessOfGeneratingIncome | CompaniesConnectionDescriptionOfCooperation | CompaniesConnectionMinimumInvestmentPeriod | CompaniesConnectionOptimalInvestmentPeriod | CompaniesConnectionIncomePaymentProcess | CompaniesConnectionRisksOfLossInvested | CompaniesConnectionPlaceOfStorageFunds | CompaniesConnectionLiquidityOfInvestment | CompaniesConnectionCompanyCommission | CompaniesConnectionOtherServiceCharges | CompaniesConnectionPayingTaxesIncome | CompaniesConnectionDocumentsSecuringRights | CompaniesConnectionDocumentsActivities | CompaniesConnectionDocumentsFromInvestor | CompaniesConnectionSite | CompaniesConnectionStartYear | CompaniesConnectionNumberOfClients | CompaniesConnectionOnlineInvestmentStatusTracking | CompaniesConnectionMinimumInvestmentAmount | CompaniesConnectionHistoricalProfitability | CompaniesConnectionCapital | CompaniesConnectionProfitability | CompaniesConnectionAboutCompany | CompaniesConnectionDisabled | createCompanyPayload | updateCompanyPayload | deleteCompanyPayload | Currencies | CurrenciesConnection | CurrenciesAggregator | CurrenciesGroupBy | CurrenciesConnectionId | CurrenciesConnectionCreated_at | CurrenciesConnectionUpdated_at | CurrenciesConnectionName | CurrenciesConnectionSymbol | CurrenciesConnectionSlug | createCurrencyPayload | updateCurrencyPayload | deleteCurrencyPayload | Global | updateGlobalPayload | deleteGlobalPayload | Instruments | InstrumentsConnection | InstrumentsAggregator | InstrumentsAggregatorSum | InstrumentsAggregatorAvg | InstrumentsAggregatorMin | InstrumentsAggregatorMax | InstrumentsGroupBy | InstrumentsConnectionId | InstrumentsConnectionCreated_at | InstrumentsConnectionUpdated_at | InstrumentsConnectionName | InstrumentsConnectionSlug | InstrumentsConnectionDescription | InstrumentsConnectionCurrency | InstrumentsConnectionRisk | InstrumentsConnectionProfitability | InstrumentsConnectionComplexity | InstrumentsConnectionShortDescription | InstrumentsConnectionMainParameters | InstrumentsConnectionHowGenerateIncome | InstrumentsConnectionMinusInvestment | InstrumentsConnectionPlusInvestment | InstrumentsConnectionDisabled | createInstrumentPayload | updateInstrumentPayload | deleteInstrumentPayload | Profitability | ProfitabilityConnection | ProfitabilityAggregator | ProfitabilityGroupBy | ProfitabilityConnectionId | ProfitabilityConnectionCreated_at | ProfitabilityConnectionUpdated_at | ProfitabilityConnectionName | ProfitabilityConnectionSlug | createProfitabilityPayload | updateProfitabilityPayload | deleteProfitabilityPayload | SubscribeUsers | SubscribeUsersConnection | SubscribeUsersAggregator | SubscribeUsersGroupBy | SubscribeUsersConnectionId | SubscribeUsersConnectionCreated_at | SubscribeUsersConnectionUpdated_at | SubscribeUsersConnectionEmail | createSubscribeUserPayload | updateSubscribeUserPayload | deleteSubscribeUserPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | createFilePayload | updateFilePayload | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createCompany(input: createCompanyInput): createCompanyPayload
  updateCompany(input: updateCompanyInput): updateCompanyPayload
  deleteCompany(input: deleteCompanyInput): deleteCompanyPayload
  createCurrency(input: createCurrencyInput): createCurrencyPayload
  updateCurrency(input: updateCurrencyInput): updateCurrencyPayload
  deleteCurrency(input: deleteCurrencyInput): deleteCurrencyPayload
  updateGlobal(input: updateGlobalInput): updateGlobalPayload
  deleteGlobal: deleteGlobalPayload
  createInstrument(input: createInstrumentInput): createInstrumentPayload
  updateInstrument(input: updateInstrumentInput): updateInstrumentPayload
  deleteInstrument(input: deleteInstrumentInput): deleteInstrumentPayload
  createProfitability(input: createProfitabilityInput): createProfitabilityPayload
  updateProfitability(input: updateProfitabilityInput): updateProfitabilityPayload
  deleteProfitability(input: deleteProfitabilityInput): deleteProfitabilityPayload
  createSubscribeUser(input: createSubscribeUserInput): createSubscribeUserPayload
  updateSubscribeUser(input: updateSubscribeUserInput): updateSubscribeUserPayload
  deleteSubscribeUser(input: deleteSubscribeUserInput): deleteSubscribeUserPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UserInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): ForgotPassword
  changePassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

type Profitability {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  slug: String
  companies(sort: String, limit: Int, start: Int, where: JSON): [Companies]
}

type ProfitabilityAggregator {
  count: Int
  totalCount: Int
}

type ProfitabilityConnection {
  values: [Profitability]
  groupBy: ProfitabilityGroupBy
  aggregate: ProfitabilityAggregator
}

type ProfitabilityConnectionCreated_at {
  key: DateTime
  connection: ProfitabilityConnection
}

type ProfitabilityConnectionId {
  key: ID
  connection: ProfitabilityConnection
}

type ProfitabilityConnectionName {
  key: String
  connection: ProfitabilityConnection
}

type ProfitabilityConnectionSlug {
  key: String
  connection: ProfitabilityConnection
}

type ProfitabilityConnectionUpdated_at {
  key: DateTime
  connection: ProfitabilityConnection
}

type ProfitabilityGroupBy {
  id: [ProfitabilityConnectionId]
  created_at: [ProfitabilityConnectionCreated_at]
  updated_at: [ProfitabilityConnectionUpdated_at]
  name: [ProfitabilityConnectionName]
  slug: [ProfitabilityConnectionSlug]
}

input ProfitabilityInput {
  name: String
  slug: String
  companies: [ID]
}

type Query {
  company(id: ID!): Companies
  companies(sort: String, limit: Int, start: Int, where: JSON): [Companies]
  companiesConnection(sort: String, limit: Int, start: Int, where: JSON): CompaniesConnection
  currency(id: ID!): Currencies
  currencies(sort: String, limit: Int, start: Int, where: JSON): [Currencies]
  currenciesConnection(sort: String, limit: Int, start: Int, where: JSON): CurrenciesConnection
  global: Global
  instrument(id: ID!): Instruments
  instruments(sort: String, limit: Int, start: Int, where: JSON): [Instruments]
  instrumentsConnection(sort: String, limit: Int, start: Int, where: JSON): InstrumentsConnection
  profitability(id: ID!): Profitability
  profitabilities(sort: String, limit: Int, start: Int, where: JSON): [Profitability]
  profitabilitiesConnection(sort: String, limit: Int, start: Int, where: JSON): ProfitabilityConnection
  subscribeUser(id: ID!): SubscribeUsers
  subscribeUsers(sort: String, limit: Int, start: Int, where: JSON): [SubscribeUsers]
  subscribeUsersConnection(sort: String, limit: Int, start: Int, where: JSON): SubscribeUsersConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input SubscribeUserInput {
  email: String
}

type SubscribeUsers {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  email: String
}

type SubscribeUsersAggregator {
  count: Int
  totalCount: Int
}

type SubscribeUsersConnection {
  values: [SubscribeUsers]
  groupBy: SubscribeUsersGroupBy
  aggregate: SubscribeUsersAggregator
}

type SubscribeUsersConnectionCreated_at {
  key: DateTime
  connection: SubscribeUsersConnection
}

type SubscribeUsersConnectionEmail {
  key: String
  connection: SubscribeUsersConnection
}

type SubscribeUsersConnectionId {
  key: ID
  connection: SubscribeUsersConnection
}

type SubscribeUsersConnectionUpdated_at {
  key: DateTime
  connection: SubscribeUsersConnection
}

type SubscribeUsersGroupBy {
  id: [SubscribeUsersConnectionId]
  created_at: [SubscribeUsersConnectionCreated_at]
  updated_at: [SubscribeUsersConnectionUpdated_at]
  email: [SubscribeUsersConnectionEmail]
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateCompanyInput {
  where: InputID
  data: editCompanyInput
}

type updateCompanyPayload {
  company: Companies
}

input updateCurrencyInput {
  where: InputID
  data: editCurrencyInput
}

type updateCurrencyPayload {
  currency: Currencies
}

input updateFileInput {
  where: InputID
  data: editFileInput
}

type updateFilePayload {
  file: UploadFile
}

input updateGlobalInput {
  data: editGlobalInput
}

type updateGlobalPayload {
  global: Global
}

input updateInstrumentInput {
  where: InputID
  data: editInstrumentInput
}

type updateInstrumentPayload {
  instrument: Instruments
}

input updateProfitabilityInput {
  where: InputID
  data: editProfitabilityInput
}

type updateProfitabilityPayload {
  profitability: Profitability
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateSubscribeUserInput {
  where: InputID
  data: editSubscribeUserInput
}

type updateSubscribeUserPayload {
  subscribeUser: SubscribeUsers
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String!
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
